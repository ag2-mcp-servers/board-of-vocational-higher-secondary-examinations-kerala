# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:33:38+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    VochseCertificatePostRequest,
    VochseCertificatePostResponse,
    VochseCertificatePostResponse1,
    VochseCertificatePostResponse2,
    VochseCertificatePostResponse3,
    VochseCertificatePostResponse4,
    VochseCertificatePostResponse5,
    VochseCertificatePostResponse6,
)

app = MCPProxy(
    description='Board of Vocational Higher Secondary Examinations, Directorate of General Education, Government of Kerala has made available VHSE Marklist of  MARCH 2020, which can be pulled by students into their Digilocker accounts',
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Board of Vocational Higher Secondary Examinations, Kerala',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/vhseker/v3'}],
)


@app.post(
    '/vochse/certificate',
    description=""" API to verify Vocational Higher Secondary. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def vochse(body: VochseCertificatePostRequest = None):
    """
    Vocational Higher Secondary
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
